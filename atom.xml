<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silence Fly</title>
  
  <subtitle>坚持三年会有什么收获？干嘛不试试呢？反正都会老三岁。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.guopengfei.top/"/>
  <updated>2019-11-04T10:01:07.993Z</updated>
  <id>https://blog.guopengfei.top/</id>
  
  <author>
    <name>郭鹏飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark0.1-rdd-and-task-schedule</title>
    <link href="https://blog.guopengfei.top/2019/11/04/Spark0-1-rdd-and-task-schedule/"/>
    <id>https://blog.guopengfei.top/2019/11/04/Spark0-1-rdd-and-task-schedule/</id>
    <published>2019-11-04T09:59:00.000Z</published>
    <updated>2019-11-04T10:01:07.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从大数据的Hello-World说起"><a href="#从大数据的Hello-World说起" class="headerlink" title="从大数据的Hello World说起"></a>从大数据的Hello World说起</h2><p>Spark 是一个大数据（分布式）计算框架，我们从大数据计算的hello world （word count）来看一下spark 的基本思想。</p><p><strong>Word Count问题，即输入一份文档文件，计算文档中各单词的个数。</strong></p><p>这是一个简单的计数问题，不考虑数据量，一种简单的解决方法是利用一个Map结构，各单词作key，各单词出现的次数作为value，逐个处理各单词，对各单词进行计数。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8iwbamz5wj30y60p079f.jpg" alt></p><p>伪代码基本是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">resMap = Map[String,Int]<br><br>for line in file:<br>  for word in line.split(' '):<br>    resMap[word]++<br></code></pre></td></tr></table></figure><p>当数据量增大之后（比如上G），逐个单词计数会很低效，这时候可以考虑使用多进程将输入数据拆分成多个小的文件，统计过程划分为两个阶段。 1）统计各个文件中各单词的个数；2）汇总各文件的结果。过程如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8iif3m44rj319i0u0tc6.jpg" alt></p><p>两个阶段的程序，有不同的职责：</p><ol><li>第一个阶段的程序，负责读取数据，对数据进行解析（上例中文档解析出单词），产生中间数据；</li><li>第二阶段的程序，负责汇总最终结果。 </li></ol><p>我们将上述两个阶段分别称为map（和上述Map数据结构不一个概念） 和 reduce. </p><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>上述多线程版本的程序，可以拆解成“单词计数相关的逻辑”以及“解决分治/汇总类问题的通用框架”，比如换成求“全国当前人口的平均年龄”，在单词计数中用到的解析单词之类的逻辑用不到了，但多个map分别读取数据进行计算产生中间结果；将中间结果，发送到reduce，这些通用功能是可以复用的。</p><p>当数据量进一步增大，上述计算可以扩展到分布式环境中,即从多进程变成多台机器并行处理。 </p><p>第一个阶段，map的过程由不同的机器完成，将中间结果发送到一台reduce所在的机器。</p><p>第二各阶段，reduce的过程和单机类似，事实上如果最终结果数据量很大，用单一的一个reduce将会成为性能瓶颈。 比如上述Word Count问题，我们想象结果是一个超级大的单词表，虽然单词表很大，但每个单词其实是唯一的。可以有多个reduce，每个reduce只处理特定几个单词的计数。</p><p>这样又引入一个新的问题，每个map处理的中间结果，要以特定的规则来分发到reduce上，使得相同的单词的中间结果可以分发到同一个reduce上。这个过程称为 <strong>shuffle</strong>。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8iw39nhvfj31140ikdkr.jpg" alt></p><p>Hadoop的本质就是将上述，Map/Reduce模型以及其依赖的shuffle过程等形成框架。</p><p>在大规模分布式环境中，除了编程模型，还需要花费大量的工作在资源分配（哪台机器处理map哪台处理reduce）和任务调度上（还有多少map任务没有结束，reduce任务是否可以开始启动了）。</p><p>Hadoop v2将Map/Reduce模型（含任务调度）和资源管理拆分成了两个独立部分，独立出来的资源管理模块就是YARN。</p><p><em>说明：Hadoop相关知识不是本位重点，就像从单机程序讲都只是为了更好的理解spark，所以不会对hadoop做过多的讨论</em></p><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><p>Hadoop将解决问题的模式限定在Map和Reduce两个阶段，Spark提供了更灵活的问题模式的支持。</p><p>首先，spark对数据操作做了更多形式的抽象，比如对应于Map阶段细分出flapMap用来表示，将一条转成多条数据。 将reduce阶段细分出 groupby 、reduceByKey等阶段。</p><p>其次，M/R的两阶段在Spark中扩展成了，对数据一系列类似map、flatMap等转换的序列。</p><p>在Spark中对数据的抽象是<strong>RDD（Resilient Distributed Datasets)</strong>，百度百科对RDD介绍如下：</p><blockquote><p> RDD(Resilient Distributed Datasets)，弹性分布式数据集，是分布式内存的一个抽象概念。RDD提供了一种高度受限的共享内存模型，即RDD是只读的记录分区的集合，只能通过在其他RDD执行确定的转换操作（如map、join和group by）而创建，然而这些限制使得实现容错的开销很低。</p></blockquote><p>即我们可以将RDD看成一个链表，链表的每个节点在上一个节点数据的基础上增加了一些操作而生成。计算最终数据时，只需按照链表上的操作顺序对数据进行计算即可，</p><p><strong>data -&gt;f1(data)-&gt;f2(f1(data))……-&gt;fn(…f1(data)…)</strong></p><p>对于word count 问题，spark代码流程如下：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8luk1j704j30sd0nvq4r.jpg" alt></p><h2 id="RDD的核心思想"><a href="#RDD的核心思想" class="headerlink" title="RDD的核心思想"></a>RDD的核心思想</h2><ol><li><p>对一个RDD进行操作后形成新的RDD； </p></li><li><p>每个RDD可以定义为 上游数据集及其上的一个操作 <strong>RDD</strong>{parent,function} </p><p>ps: 操作分为两个部分，一个是抽象出来通用的操作类型，如对数据逐个操作、过滤、抽样； 另一部分是更为灵活的逻辑，如 对数据逐个操作中的具体操作逻辑。 前一部分，Spark定义成通用的API，后一部分，用户以函数参数的形式传入。</p></li><li><p>RDD的起源为使用API由外部数据（文件等）创建得到。   </p></li><li><p>RDD的转换由多个称为Transform操作的API组成  ps:及各种操作对应的 RDD子类</p></li><li><p>考虑并行处理，每个数据集可以表示成多个 <strong>split</strong>的组合，及多个子数据集，RDD扩展为 一组数据集 及 其上的一个操作 形成新的一组数据集 </p></li><li><p>由称为Action的多个API生成最终数据。</p></li></ol><p>以 alpha-0.1版本 HdfsTest 为例，代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> spark._<br><br><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">HdfsTest</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]) &#123;<br>    <span class="hljs-keyword">val</span> sc = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkContext</span>(args(<span class="hljs-number">0</span>), <span class="hljs-string">"HdfsTest"</span>)<br>    <span class="hljs-keyword">val</span> file = sc.textFile(args(<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">val</span> mapped = file.map(s =&gt; s.length).cache()<br>    <span class="hljs-keyword">for</span> (iter &lt;- <span class="hljs-number">1</span> to <span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-keyword">val</span> start = <span class="hljs-type">System</span>.currentTimeMillis()<br>      <span class="hljs-keyword">for</span> (x &lt;- mapped) &#123; x + <span class="hljs-number">2</span> &#125;<br>      <span class="hljs-comment">//  println("Processing: " + x)</span><br>      <span class="hljs-keyword">val</span> end = <span class="hljs-type">System</span>.currentTimeMillis()<br>      println(<span class="hljs-string">"Iteration "</span> + iter + <span class="hljs-string">" took "</span> + (end-start) + <span class="hljs-string">" ms"</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中，变量file 和 mapped都是 RDD实例，其中，file由SparkContext的API直接从外部文件穿件得到；mapped 根据RDD的转换函数生成。代码中的其他的内容这里不比关注。 </p><h2 id="RDD类定义"><a href="#RDD类定义" class="headerlink" title="RDD类定义"></a>RDD类定义</h2><p>在alpha-0.1版本中，RDD定义如下：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8l7vs4snlj30lo0o877w.jpg" alt></p><p><strong>RDD的函数可以分为两类，一类是用户接口算子，包括对数据进行操作的transform算子，如map、filter、reduce等和触发任务执行的Action算子如 count、collect、foreach等；另一类是任务执行时需要的函数，如split、iterator等，子类通过复写这些函数来实现不同的子RDD。</strong></p><p>在alpha-0.1版本中RDD实现了以下函数:</p><p><strong>执行函数（子类重载）</strong></p><ul><li><p>def splits: Array[Split] 获取数据分片</p></li><li><p>def iterator(split: Split): Iterator[T] 数据分片上的迭代器 ps:每个分片也是一个数据集，需要提供迭代器来遍历。</p></li><li><p>def preferredLocations(split: Split): Seq[String] 数据分片引用的数据地址</p></li></ul><p>在RDD类中，上述三个函数只有定义并没有实现，在各子类中具体实现，以<strong>HdfsTextFile</strong>类为例，函数实现如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@transient</span> <span class="hljs-keyword">val</span> splits_ =<br>  inputFormat.getSplits(conf, sc.scheduler.numCores).map(<span class="hljs-keyword">new</span> <span class="hljs-type">HdfsSplit</span>(_)).toArray<br><br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">splits</span> </span>= splits_.asInstanceOf[<span class="hljs-type">Array</span>[<span class="hljs-type">Split</span>]]<br><br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">iterator</span></span>(split_in: <span class="hljs-type">Split</span>) = <span class="hljs-keyword">new</span> <span class="hljs-type">Iterator</span>[<span class="hljs-type">String</span>] &#123;<br>  <span class="hljs-keyword">val</span> split = split_in.asInstanceOf[<span class="hljs-type">HdfsSplit</span>]<br>  <span class="hljs-keyword">var</span> reader: <span class="hljs-type">RecordReader</span>[<span class="hljs-type">LongWritable</span>, <span class="hljs-type">Text</span>] = <span class="hljs-literal">null</span><br>  <span class="hljs-type">ConfigureLock</span>.synchronized &#123;<br>    <span class="hljs-keyword">val</span> conf = <span class="hljs-keyword">new</span> <span class="hljs-type">JobConf</span>()<br>    conf.set(<span class="hljs-string">"io.file.buffer.size"</span>,<br>        <span class="hljs-type">System</span>.getProperty(<span class="hljs-string">"spark.buffer.size"</span>, <span class="hljs-string">"65536"</span>))<br>    <span class="hljs-keyword">val</span> tif = <span class="hljs-keyword">new</span> <span class="hljs-type">TextInputFormat</span>()<br>    tif.configure(conf) <br>    reader = tif.getRecordReader(split.inputSplit.value, conf, <span class="hljs-type">Reporter</span>.<span class="hljs-type">NULL</span>)<br>  &#125;<br>  <span class="hljs-keyword">val</span> lineNum = <span class="hljs-keyword">new</span> <span class="hljs-type">LongWritable</span>()<br>  <span class="hljs-keyword">val</span> text = <span class="hljs-keyword">new</span> <span class="hljs-type">Text</span>()<br>  <span class="hljs-keyword">var</span> gotNext = <span class="hljs-literal">false</span><br>  <span class="hljs-keyword">var</span> finished = <span class="hljs-literal">false</span><br><br>  <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hasNext</span></span>: <span class="hljs-type">Boolean</span> = &#123;<br>    <span class="hljs-keyword">if</span> (!gotNext) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        finished = !reader.next(lineNum, text)<br>      &#125; <span class="hljs-keyword">catch</span> &#123;<br>        <span class="hljs-keyword">case</span> eofe: java.io.<span class="hljs-type">EOFException</span> =&gt;<br>          finished = <span class="hljs-literal">true</span><br>      &#125;<br>      gotNext = <span class="hljs-literal">true</span><br>    &#125;<br>    !finished<br>  &#125;<br><br>  <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next</span></span>: <span class="hljs-type">String</span> = &#123;<br>    <span class="hljs-keyword">if</span> (!gotNext)<br>      finished = !reader.next(lineNum, text)<br>    <span class="hljs-keyword">if</span> (finished)<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> java.util.<span class="hljs-type">NoSuchElementException</span>(<span class="hljs-string">"end of stream"</span>)<br>    gotNext = <span class="hljs-literal">false</span><br>    text.toString<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preferredLocations</span></span>(split: <span class="hljs-type">Split</span>) = &#123;<br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Filtering out "localhost" in case of file:// URLs</span><br>  split.asInstanceOf[<span class="hljs-type">HdfsSplit</span>].inputSplit.value.getLocations().filter(_ != <span class="hljs-string">"localhost"</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Transform算子</strong></p><ul><li><p>def map(f: T =&gt; U):MappedRDD</p></li><li><p>def flatMap(f: T =&gt; Traversable[U]):FlatMappedRDD</p></li><li><p>def filter(f: T =&gt; Boolean):FilteredRDD</p></li><li><p>def aggregateSplit():SplitRDD</p></li><li><p>def cache():CachedRDD</p></li><li><p>def def sample(withReplacement: Boolean, frac: Double,seed: Int):SampledRDD</p></li><li><p>def union(other: RDD[T]):UnionRDD</p></li><li><p>def ++(other: RDD[T]):UnionRDD</p></li><li><p>def cartesian(other: RDD[U]):CartesianRDD</p></li></ul><p>每个Transform算子会产生一个与其相对类型的RDD，如map算子的实现如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">map</span></span>[<span class="hljs-type">U</span>: <span class="hljs-type">ClassManifest</span>](f: <span class="hljs-type">T</span> =&gt; <span class="hljs-type">U</span>) = <span class="hljs-keyword">new</span> <span class="hljs-type">MappedRDD</span>(<span class="hljs-keyword">this</span>, sc.clean(f))<br></code></pre></td></tr></table></figure><p><strong>Action算子</strong></p><ul><li>def foreach(f: T =&gt; Unit):Unit</li></ul><ul><li><p>def collect(): Array[T]</p></li><li><p>def toArray(): Array[T]</p></li><li><p>def reduce(f: (T, T) =&gt; T): T</p></li><li><p>def take(num: Int): Array[T]</p></li><li><p>def first: T</p></li><li><p>def count(): Long</p></li></ul><p>每个Action算子会产生任务调度，如collect算子的实现如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">collect</span></span>(): <span class="hljs-type">Array</span>[<span class="hljs-type">T</span>] = &#123;<br>  <span class="hljs-keyword">val</span> tasks = splits.map(s =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">CollectTask</span>(<span class="hljs-keyword">this</span>, s))<br>  <span class="hljs-keyword">val</span> results = sc.runTaskObjects(tasks)<br>  <span class="hljs-type">Array</span>.concat(results: _*)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RDD类体系"><a href="#RDD类体系" class="headerlink" title="RDD类体系"></a>RDD类体系</h2><p>RDD分为两大类，一类根据外部数据生成，是RDD的起点，在alpha-0.1版本中只有HdfsTextFile 和ParallelArray；另一类是在RDD增加操作产生，如 MappedRDD、FilteredRDD等，该类RDD和transform算子相对应。继承体系如下：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ly0b6kb7j30wt0bndgk.jpg" alt="img"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ly09rme9j30eq09mjrl.jpg" alt="img"></p><p>alpha-0.1中实现的RDD有：</p><ul><li>HdfsTextFile(sc: SparkContext, path: String)</li><li>ParallelArray(sc: SparkContext, data: Seq[T], numSlices: Int)</li><li>MappedRDD(prev: RDD[T], f: T =&gt; U) 对应map操作</li><li>FilteredRDD(prev: RDD[T], f: T =&gt; Boolean)  对应filter操作</li><li>FlatMappedRDD(prev: RDD[T], f: T =&gt; Traversable[U]) 对应flatmap操作</li><li>SplitRDD(prev: RDD[T])</li><li>SampledRDD(prev: RDD[T], withReplacement: Boolean, frac: Double, seed: Int)   对应sample操作</li><li>CachedRDD(prev: RDD[T])  对应cache操作</li><li>UnionRDD(sc: SparkContext, rdd1: RDD[T], rdd2: RDD[T]) 把split 合并</li><li>CartesianRDD(sc: SparkContext, rdd1: RDD[T], rdd2: RDD[U])</li></ul><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p>如上所述，Action算子会产生任务，并触发任务的提交。下面我们以foreach为例，追踪任务调度流程。</p><p>第一步，在action算子（foreach）中，对每个分区(split)生成Task（ForeachTask）实例，并调用sc（SparkContext）中的 runTaskObjects函数来执行任务。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foreach</span></span>(f: <span class="hljs-type">T</span> =&gt; <span class="hljs-type">Unit</span>) &#123;<br>  <span class="hljs-keyword">val</span> cleanF = sc.clean(f)<br>  <span class="hljs-keyword">val</span> tasks = splits.map(s =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">ForeachTask</span>(<span class="hljs-keyword">this</span>, s, cleanF)).toArray<br>  sc.runTaskObjects(tasks)<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步，在SparkContext的 runTaskObjects函数中，调用 Scheduler实例的 runTasks函数来执行任务。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SparkContext</span>(<span class="hljs-params">master: <span class="hljs-type">String</span>, frameworkName: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Logging</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span>[spark] <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">runTaskObjects</span></span>[<span class="hljs-type">T</span>: <span class="hljs-type">ClassManifest</span>](tasks: <span class="hljs-type">Seq</span>[<span class="hljs-type">Task</span>[<span class="hljs-type">T</span>]])<br>      : <span class="hljs-type">Array</span>[<span class="hljs-type">T</span>] = &#123;<br>    logInfo(<span class="hljs-string">"Running "</span> + tasks.length + <span class="hljs-string">" tasks in parallel"</span>)<br>    <span class="hljs-keyword">val</span> start = <span class="hljs-type">System</span>.nanoTime<br>    <span class="hljs-keyword">val</span> result = scheduler.runTasks(tasks.toArray)<br>    logInfo(<span class="hljs-string">"Tasks finished in "</span> + (<span class="hljs-type">System</span>.nanoTime - start) / <span class="hljs-number">1e9</span> + <span class="hljs-string">" s"</span>)<br>    <span class="hljs-keyword">return</span> result<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Scheduler与Task类体系"><a href="#Scheduler与Task类体系" class="headerlink" title="Scheduler与Task类体系"></a>Scheduler与Task类体系</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ly05fsgpj30iz09i3yu.jpg" alt="img"></p><h1 id="SparkContext"><a href="#SparkContext" class="headerlink" title="SparkContext"></a>SparkContext</h1><p>SparkContext有两大职责，一方面管理着spark运行所需的环境，在alpha-0.1中主要是 任务调度器Scheduler；另一方面向用户提供了编程API。主要函数如下：</p><p><strong>运行环境</strong></p><ul><li>scheduler: Scheduler 任务调度器</li><li>def runTasks(tasks: Array[() =&gt; T]): Array[T] 任务执行函数（由rdd的action算子调用）</li></ul><p><strong>编程API</strong></p><ul><li>def textFile(path: String) : HdfsTextFile</li><li>def parallelize(seq: Seq[T], numSlices: Int):ParallelArray[T]</li><li>def parallelize(seq: Seq[T]):ParallelArray[T]</li><li>def accumulator():Accumulator</li><li>def broadcast(value: T):CentralizedHDFSBroadcast</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ly010hsmj30bg0bnmyl.jpg" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 alpha-0.1版本中，实现了基本分布式数据模型RDD的类体系和任务调度模型，但这个版本还比较简单，并没有涉及复杂的操作，比如并没有实现涉及到shuffle过程的操作。但该版本对于理解spark的基本思想还是有很大的帮助。</p><p>下一篇文章，我们来调试一下spark0.1版本中的编程模型和任务调度系统。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>Spark-alpha-0.1源码解读：<a href="https://www.jianshu.com/p/795302f94fa1" target="_blank" rel="noopener">https://www.jianshu.com/p/795302f94fa1</a></li><li>百度百科：<a href="https://baike.baidu.com/item/RDD/5840158" target="_blank" rel="noopener">https://baike.baidu.com/item/RDD/5840158</a></li><li><a href="[https://blog.guopengfei.top/2019/02/15/spark%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90alpha-0-1RDD%E4%B8%8E%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/#more](https://blog.guopengfei.top/2019/02/15/spark源码解析alpha-0-1RDD与任务调度/#more)">spark源码解析alpha-0.1</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从大数据的Hello-World说起&quot;&gt;&lt;a href=&quot;#从大数据的Hello-World说起&quot; class=&quot;headerlink&quot; title=&quot;从大数据的Hello World说起&quot;&gt;&lt;/a&gt;从大数据的Hello World说起&lt;/h2&gt;&lt;p&gt;Spark 
      
    
    </summary>
    
    
      <category term="spark" scheme="https://blog.guopengfei.top/tags/spark/"/>
    
      <category term="源码" scheme="https://blog.guopengfei.top/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>OKR简介</title>
    <link href="https://blog.guopengfei.top/2019/06/30/okr-introduction/"/>
    <id>https://blog.guopengfei.top/2019/06/30/okr-introduction/</id>
    <published>2019-06-30T03:09:20.000Z</published>
    <updated>2019-06-30T07:34:09.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>可能是我太后知后觉了，感觉突然OKR就来到了身边。最早是两三个月前在上家公司听到的，OKR似乎很神秘，隐约听到管理层在使用OKR来考核各组甚至每个人的工作。后来听说百度也在用，就专门看了一下OKR的介绍，知道它是一个目标管理的方法。<br>最近来到新的公司，公司也在使用OKR，而且在这里OKR不是管理层的专属，每个人都要制定OKR，所以就来深入的理解一下这个工具。</p><p>ORK 是Object&amp;KeyResult 两个单词的缩写， 即<strong>目标</strong>与衡量目标达成的<strong>关键结果</strong>，是一种目标管理方法。</p><p>[wikipedia]对OKR的描述：</p><blockquote><p>Objectives and key results (OKR) is a framework for defining and tracking objectives and their outcomes.</p></blockquote><h3 id="提出与流行"><a href="#提出与流行" class="headerlink" title="提出与流行"></a>提出与流行</h3><p>OKR最早由 <strong>OKRs之父</strong> Andy Grove 在<strong>Intel</strong> （1976）提出，并且在其书<strong>High Output Management</strong>（1983）中清晰的定义。</p><p>后由 John Doerr在1999年左右 引入Google，并由Google将 <strong>OKR</strong> 发扬光大，给Google带来了很大的收益。</p><p>OKR为Google取得很好收益之后，开始在很多类似的科技创业公司中运用，比如  <a href="https://en.wikipedia.org/wiki/LinkedIn" target="_blank" rel="noopener">LinkedIn</a> ，<a href="https://en.wikipedia.org/wiki/Twitter" target="_blank" rel="noopener">Twitter</a>，和 <a href="https://en.wikipedia.org/wiki/Uber" target="_blank" rel="noopener">Uber</a>。</p><p>OKR传入中国大概是在2013年底，主要是一些从硅谷回国创业的人开始运用到他们的公司，逐渐开始受到IT、互联网、高科技、海外投资人的追捧，并开始流行起来。</p><p>下面来看看什么是OKR，及其设定技巧。</p><h2 id="设定目标（Object）"><a href="#设定目标（Object）" class="headerlink" title="设定目标（Object）"></a>设定目标（Object）</h2><p>目标应该是要<strong>完成什么</strong>，即想要达成什么（What）目标，需要是产出式的，而不是参与式的。</p><p><strong>目标设置应遵循SMART原则：</strong></p><ul><li><p>Specific：具体的</p></li><li><p>Measurable：可衡量的</p></li><li><p>Aspirational：有挑战性的</p></li><li><p>Relevant：相关联的</p></li><li><p>Temporal：有时限的</p></li></ul><p>比如，”进行kylin的调研” 是一个不好的目标，因为无法进行衡量，无法衡量效果，自然很难说有挑战性，也没有时限，很容易就做的不了了之了。</p><p>而，”kylin知识沉淀及业务落地“，会更可衡量一些，而相应的KE可以拆解为”文档积累“和 ”业务场景落地“。</p><h3 id="目标设定技巧"><a href="#目标设定技巧" class="headerlink" title="目标设定技巧"></a>目标设定技巧</h3><ul><li><p>每次设定3-5个为宜，太多会目标不够聚焦</p></li><li><p>目标应该有挑战性</p><ul><li>对于目标的完成应该有一定的压力，需要全力以赴去做才能达到0.7左右。每次考核在0.7为宜，<strong>长期太低，说明目标太不务实，偏离实际</strong>；而<strong>长期太高说明预期太保守，不能激发潜能，可能只是走个形式</strong>。</li><li>常规性工作不必设定为ORK，如果是长期重要的工作，可以考虑进行目标拆解。</li></ul></li><li><p>一年时间内尽量不要变，以确保为了实现这相目标而全力以赴努力，一旦变的多了，就会影响士气，也会影响目标的实现。</p></li><li><p>公司目标的产生是要通过专业的梳理和分析后得出</p><ul><li>愿景、使命和目标是解决方向（Where）的问题，即方向问题，到哪去。</li><li>首先要梳理公司战略，未来的发展方向、定位；</li><li>还要考虑公司的核心优势、产业的发展趋势、国家的宏观政策；</li><li>并结合资本的产业方向。</li></ul></li><li><p>个人的目标应该支持公司目标（直接或间接）</p></li></ul><h2 id="设定关键结果-KeyResult"><a href="#设定关键结果-KeyResult" class="headerlink" title="设定关键结果 (KeyResult)"></a>设定关键结果 (KeyResult)</h2><p>关键结果是检验达成目标的标准。</p><ul><li><p>KR不能太多，每个O最多4个KR</p></li><li><p>结果要可测量，<strong>必须有个number</strong>，能很容易的给出分值</p></li><li><p>对于公司和部门每个KR应该有Owner</p></li><li><p>KR不是Todo List，关注的是<strong>结果</strong></p></li><li><p>但每个KR需要落实到TODO上，以保证KR的实现</p></li><li><p>KR应该是直接支持目标的，只要KR完成了，我们基本可以判定大的Objective就达到了</p></li><li><p>但是todo实现不了这样的效果，有时候经常是todo全完成了，但是Objective没有实现</p></li></ul>  <img src="/2019/06/30/okr-introduction/mission-okrs.png">  <img src="/2019/06/30/okr-introduction/okrs-on-time-scale.png"><h2 id="要点提示"><a href="#要点提示" class="headerlink" title="要点提示"></a>要点提示</h2><ul><li>OKR在公司内要公开，以确保在尽可能大的范围内目标一致，形成合力。</li><li>OKR与KPI不能完全相互替代，因为OKR要求大家都去做挑战的事情，那么常规的日常性事务谁来做？在人员素质很高的情况下(如谷歌)常规性的事务大家都自觉处理好了，而在人员素质没达到很高自觉性下，需要使用KPI来补充管理。</li><li>目标应该比较稳定，但应该经常（周、月）更新KR完成情况。</li><li>OKR书籍<ul><li>《OKR源于英特尔和谷歌的目标管理利器》作者：保罗</li><li>《OKR工作法》作者：克里斯蒂纳.沃特克Christna</li><li>《OKR目标关键成果法：盛行硅谷创新公司目标管理方法》 作者：<a href="https://book.douban.com/search/陈镭" target="_blank" rel="noopener">陈镭</a> </li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>Wikipedia OKR：  <a href="https://en.wikipedia.org/wiki/OKR" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/OKR</a></p></li><li><p>OKR在国内应用的现状： <a href="https://zhuanlan.zhihu.com/p/38152061" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38152061</a></p></li><li><p>OKR用于个人成长： <a href="https://www.jianshu.com/p/196f38eedd7d" target="_blank" rel="noopener">https://www.jianshu.com/p/196f38eedd7d</a></p></li><li><p>The Basics of OKR  <a href="https://www.slideshare.net/HenrikJanVanderPol/how-to-outperform-anyone-else-introduction-to-okr" target="_blank" rel="noopener">https://www.slideshare.net/HenrikJanVanderPol/how-to-outperform-anyone-else-introduction-to-okr</a></p></li><li><p>How Google sets goals: OKRs <a href="https://library.gv.com/how-google-sets-goals-okrs-a1f69b0b72c7" target="_blank" rel="noopener">https://library.gv.com/how-google-sets-goals-okrs-a1f69b0b72c7</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;可能是我太后知后觉了，感觉突然OKR就来到了身边。最早是两三个月前在上家公司听到的，OKR似乎很神秘，隐约听到管理层在使用OKR来考核各组甚
      
    
    </summary>
    
      <category term="综合能力" scheme="https://blog.guopengfei.top/categories/%E7%BB%BC%E5%90%88%E8%83%BD%E5%8A%9B/"/>
    
    
      <category term="OKR" scheme="https://blog.guopengfei.top/tags/OKR/"/>
    
  </entry>
  
  <entry>
    <title>CleanHandBook (LeetCode) summary</title>
    <link href="https://blog.guopengfei.top/2019/05/24/leetcode-summary/"/>
    <id>https://blog.guopengfei.top/2019/05/24/leetcode-summary/</id>
    <published>2019-05-24T10:33:48.000Z</published>
    <updated>2019-06-14T02:36:21.640Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结了  CleanHandBook_v1.0.1.pdf 各题目的解题要点：</p><h2 id="Chapter-1-Array-String-1-16"><a href="#Chapter-1-Array-String-1-16" class="headerlink" title="Chapter 1: Array/String(1-16)"></a>Chapter 1: Array/String(1-16)</h2><ul><li><p>Two Sum: 在数据中查找和等于特定值的两个数。</p><p>Tips:  HashTable    遍历数组中每个值x，x为key，x的索引index为value 存入 map中。如果只判断是否存在，则用set就可以了。</p></li><li><p>Two Sum II – Input array is sorted: 同上题，但数组是已排序的。</p><p>Tips：前后两个指针 Ai+Aj&gt; target ，减小j; &lt; target 增大i.</p></li><li><p>Two Sum III – Data structure design: 设计一个支持 find (查找Two Sum) 和 add的数据结构。</p><p>Tips：与上题不同的是只判断是否存在两个值，而且可以重复。   用一个hashMap记录值，并且记录值出现的次数。</p></li><li><p>Valid Palindrome: 判断一个字符串是否是回文</p><p>Tips：1）前后两个指针；2）过滤空白字符</p></li><li><p>Implement strstr(): 是否包含某个子串</p></li></ul><p>​     Tips：两层循环，暴力解法。</p><ul><li><p>Reverse Words in a String:  翻转句子中的单词。</p><p>Tips：使用一个StringBuilder；从后向前遍历句子中的单词(空格分割)</p></li><li><p>Reverse Words in a String II: 同上，前后无空格，不使用额外存储。</p><p>Tips：翻转两趟，第一趟把整句所有字符翻转；第二趟，翻转每个单词中的字符。</p></li><li><p>String to Integer (atoi): 字符串转整形</p><p> Tips：负数判断；溢出判断(2147483647)；从高位循环处理</p></li><li><p>Valid Number:  判断是否是合法数字</p><p>Tips：多个部分多个循环单独处理即可。(空格、+/-、数字、小数点、数字、空格)</p></li><li><p><strong>Longest Substring Without Repeating Characters</strong>：</p><p> Tips: 方案一，HashMap 逐步缩小窗口法；方案二，hashMap 记录位置，跳跃缩小窗口法。</p></li><li><p><strong>Longest Substring with At Most Two Distinct Characters</strong> ：</p><p> Tips: 方案一，三个变量，i,k分别是窗口的边界，j记录上次字符变换的位置。方案二，滑动缩小窗口法。</p></li><li><p>Missing Ranges：</p><p> Tips：start -1 ，end+1。</p></li><li><p>Longest Palindromic Substring：</p><p> Tips：遍历回文中心，以中心向外扩张，奇偶两种情况。</p></li><li><p>One Edit Distance：</p><p> Tips: 分情况处理</p></li><li><p>Read N Characters Given Read4：</p><p> Tips:注意文件结束</p></li><li><p>Read N Characters Given Read4 – Call multiple times：</p><p> Tips：上次没用完字符的使用</p></li></ul><h2 id="Chapter-2-Math-17-19"><a href="#Chapter-2-Math-17-19" class="headerlink" title="Chapter 2: Math(17-19)"></a>Chapter 2: Math(17-19)</h2><ol start="17"><li>Reverse Integer</li></ol><p>Tips：溢出处理 214748364</p><ol start="17"><li>Plus One</li></ol><p>Tips：进位是确定的只会是1，所以从后往前不为9则停止。</p><ol start="17"><li>Palindrome Number</li></ol><p>Tips: 先循环找到最高位的位数；</p><h2 id="Chapter-3-Linked-List-20-24"><a href="#Chapter-3-Linked-List-20-24" class="headerlink" title="Chapter 3: Linked List(20-24)"></a>Chapter 3: Linked List(20-24)</h2><ol start="20"><li>Merge Two Sorted Lists</li></ol><p>Tips: 基础链表遍历</p><ol start="20"><li>Add Two Numbers</li></ol><p>Tips:注意进位</p><ol start="20"><li><p>Swap Nodes in Pairs</p><p>Tips：pre,p,q,r四个指针</p></li><li><p>Merge K Sorted Linked Lists</p><p>Tips: 方案一，分治法，每次缩小一半数量；方案二，大小为k的小顶堆。</p></li><li><p>Copy List with Random Pointer</p><p>Tips:  关键是怎样找到原始节点的clone节点；方案一，hashMap法，第一遍遍历，创建各clone节点，第二遍，关联clone节点的random指针；方案二，clone节点插入原节点后面法，第一步，创建各clone节点，第二步，关联random指针，第三步分成两个链表。</p></li></ol><h2 id="Chapter-4-Binary-Tree-25-32"><a href="#Chapter-4-Binary-Tree-25-32" class="headerlink" title="Chapter 4: Binary Tree(25-32)"></a>Chapter 4: Binary Tree(25-32)</h2><ol start="25"><li><p>Validate Binary Search Tree</p><p>Tips: 方案一，中序遍历递增；方案二，限定节点取值范围，递归传递范围。null。</p></li><li><p>Maximum Depth of Binary Tree</p><p>Tips: 递归</p></li><li><p>Minimum Depth of Binary Tree</p><p>Tips:递归；注意如果某个子树为空则不参与比较。</p></li><li><p>Balanced Binary Tree：</p><p>Tips: 递归，传递子树深度子树本身是否平衡，可以用-1表示不平衡</p></li><li><p>Convert Sorted Array to Balanced Binary Search Tree</p><p>Tips:二分法，递归</p></li><li><p>Convert Sorted List to Balanced Binary Search Tree</p><p>Tips: 中序遍历，要知道左右子树的节点数，从原始链表中逐个取数。</p></li><li><p>Binary Tree Maximum Path Sum</p><p>Tips: 可能是左右子树联通，也可能向父节点延伸。</p></li><li><p>Binary Tree Upside Down</p><p>Tips: 当成特殊链表；方案一，自顶向下递归 ，方案二，字底向上 迭代。</p></li></ol><h2 id="Chapter-5-Bit-Manipulation-33-34"><a href="#Chapter-5-Bit-Manipulation-33-34" class="headerlink" title="Chapter 5: Bit Manipulation(33-34)"></a>Chapter 5: Bit Manipulation(33-34)</h2><ol start="33"><li>Single Number：</li></ol><p>Tips:异或</p><ol start="33"><li><p>Single Number II：(出现三次，只有一个出现一次)</p><p>Tips:方案一， 记录各位1的总个数，模3；方案二，三个变量分别记录 ones,twos,threes.</p></li></ol><h2 id="Chapter-6-Misc-35-38"><a href="#Chapter-6-Misc-35-38" class="headerlink" title="Chapter 6: Misc(35-38)"></a>Chapter 6: Misc(35-38)</h2><ol start="35"><li><p>Spiral Matrix</p><p>Tips: m,n 记录行、列可以移动的步数；r,l记录当前位置；四个方向单独处理</p></li><li><p>Integer to Roman</p><p>Tips: IV, IX 等当成独立的字符来处理；从大到小除求商即为该字符的个数。</p></li><li><p>Roman to Integer</p><p>Tips: pre如果比当前小，则减去两倍的pre</p></li><li><p>Clone graph</p></li></ol><p>Tips: 记录以及遍历的节点；宽度优先或深度优先</p><h2 id="Chapter-7-Stack-39-41"><a href="#Chapter-7-Stack-39-41" class="headerlink" title="Chapter 7: Stack(39-41)"></a>Chapter 7: Stack(39-41)</h2><ol start="39"><li><p>Min Stack</p><p>Tips:push和pop 时注意栈顶元素和min的关系。</p></li><li><p>Evaluate Reverse Polish Notation</p><p>Tips:栈基本操作，遇到操作符就去栈中两个数，求值后再压入栈。</p></li><li><p>Valid Parentheses</p><p>Tips:栈基本操作，HashMap记录括号关联关系，左括号进栈，遇到右括号则与栈顶比较。</p></li></ol><h2 id="Chapter-8-Dynamic-Programming-42-47"><a href="#Chapter-8-Dynamic-Programming-42-47" class="headerlink" title="Chapter 8: Dynamic Programming(42-47)"></a>Chapter 8: Dynamic Programming(42-47)</h2><ol start="42"><li>Climbing Stairs</li></ol><p>Tips: 递归、迭代，斐波那契数列</p><ol start="42"><li><p>Unique Paths</p><p>Tips:方案一， 递归  方案二，优化递归，使用momeration技术，方案三，自底向上，迭代。</p></li><li><p>Unique Paths II</p><p>Tips: 同上，注意障碍物上路径为0</p></li><li><p>Maximum Sum Subarray</p><p>Tips: f(Ai)= Max(f(Ai-1)+Ai,Ai)</p></li><li><p>Maximum Product Subarray</p></li></ol><p>​    Tips: 记录到位置i的最大值和最小值</p><ol start="42"><li>Coins in a Line</li></ol><h2 id="Chapter-9-Binary-Search-48-50"><a href="#Chapter-9-Binary-Search-48-50" class="headerlink" title="Chapter 9: Binary Search(48-50)"></a>Chapter 9: Binary Search(48-50)</h2><ol start="48"><li><p>Search Insert Position</p><p>Tips:基本二分法</p></li><li><p>Find Minimum in Sorted Rotated Array</p><p>Tips: 二分法简单变体</p></li><li><p>Find Minimum in Rotated Sorted Array II – with duplicates</p><p>Tips: 如果都相等则只移动一位索引。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文总结了  CleanHandBook_v1.0.1.pdf 各题目的解题要点：&lt;/p&gt;
&lt;h2 id=&quot;Chapter-1-Array-String-1-16&quot;&gt;&lt;a href=&quot;#Chapter-1-Array-String-1-16&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="编程基础" scheme="https://blog.guopengfei.top/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="LeetCode" scheme="https://blog.guopengfei.top/tags/LeetCode/"/>
    
      <category term="算法" scheme="https://blog.guopengfei.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Spark Streaming in Practice（二）——读写kafka之读Kafka</title>
    <link href="https://blog.guopengfei.top/2019/05/21/spark-streaming-in-practice-2/"/>
    <id>https://blog.guopengfei.top/2019/05/21/spark-streaming-in-practice-2/</id>
    <published>2019-05-21T11:12:39.000Z</published>
    <updated>2019-06-14T02:36:21.640Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章我们一起研究了Kafka的特性，kafka Producer API 以及Spark写API的方案，本文我们继续研究Spark 读取Kafka的方案。ps: 读比较复杂所以放在后面研究。同样的我们从Kakfa 的Consumer API开始。</p><a id="more"></a><h2 id="Kafka-Consumer-APIs"><a href="#Kafka-Consumer-APIs" class="headerlink" title="Kafka Consumer APIs"></a>Kafka Consumer APIs</h2><p>Kafka 在0.8版本中有两层Consumer API，low-level的”simple”API和 high-level API。简单的理解 <strong>simple API 暴露了更多细节(offset)，用户可以做更精细的控制</strong>；<strong>而High-leve API因为封装了底层细节（offset）使用起来更方便</strong>。</p><h3 id="Simple-API（0-8）"><a href="#Simple-API（0-8）" class="headerlink" title="Simple API（0.8）"></a>Simple API（0.8）</h3><p>Simple API 维护了对单个broker的连接，每次请求都有闭合的响应。该API是无状态的即每次请求都是独立的，因此每次请求都需要指定要读取的offset，用户需要自己维护已经处理的offset信息。</p><p>该接口是线程安全的。</p><p>应用场景主要为：</p><ol><li>想要多次读取一条信息；</li><li>只消费一部分消息；</li><li>用户来确保 exact once 语义。</li></ol><p>而使用该API就需要用户有更多的工作：</p><ol><li>用户需要自己维护已经处理的offset信息，以知道每次请求要从哪个offset开始；</li><li>用户需要自己指定各partition的leader broker；</li><li>用户需要处理leader的变更情况。</li></ol><p>API原型如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">kafka</span>.<span class="hljs-title">javaapi</span>.<span class="hljs-title">consumer</span>.<span class="hljs-title">SimpleConsumer</span> </span>&#123;<br>  <span class="hljs-comment">/**<br>   *  Fetch a set of messages from a topic.<br>   *<br>   *  <span class="hljs-doctag">@param</span> request specifies the topic name, topic partition, starting byte offset, maximum bytes to be fetched.<br>   *  <span class="hljs-doctag">@return</span> a set of fetched messages<br>   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> FetchResponse <span class="hljs-title">fetch</span><span class="hljs-params">(request: kafka.javaapi.FetchRequest)</span></span>;<br></code></pre></td></tr></table></figure><p>调用样例如下，可以看到请求中需要包含其实的 offset。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">FetchRequest req = <span class="hljs-keyword">new</span> FetchRequestBuilder()<br>        .clientId(clientName)<br>        .addFetch(a_topic, a_partition, readOffset, <span class="hljs-number">100000</span>)<br>        .build();<br>FetchResponse fetchResponse = consumer.fetch(req);<br></code></pre></td></tr></table></figure><h3 id="High-Level-API-0-8"><a href="#High-Level-API-0-8" class="headerlink" title="High-Level API(0.8)"></a>High-Level API(0.8)</h3><p>High-level API，隐藏了brokers 连接情况的细节，并且是有状态的即维护了已经消费的offset的情况。</p><p>该API将已消费的offset存储在zookeeper上。ps:会以Consumer group_id作为子目录，即以Consumer Group来消费数据。</p><p>API 原型如下，我们看到该API会对每个Topic建立一个KafkaStream（迭代器）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**<br> *  Create a list of message streams of type T for each topic.<br> *<br> *  <span class="hljs-doctag">@param</span> topicCountMap  a map of (topic, #streams) pair<br> *  <span class="hljs-doctag">@param</span> decoder a decoder that converts from Message to T<br> *  <span class="hljs-doctag">@return</span> a map of (topic, list of  KafkaStream) pairs.<br> *          The number of items in the list is #streams. Each stream supports<br> *          an iterator over message/metadata pairs.<br> */</span><br><span class="hljs-keyword">public</span> &lt;K,V&gt; Map&lt;String, List&lt;KafkaStream&lt;K,V&gt;&gt;&gt; <br>  createMessageStreams(Map&lt;String, Integer&gt; topicCountMap, Decoder&lt;K&gt; keyDecoder, Decoder&lt;V&gt; valueDecoder);<br></code></pre></td></tr></table></figure><p>样例如下：</p><p>该API会将消费的offset存储在zookeeper中，所以需要给出zk的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConsumerConfig <span class="hljs-title">createConsumerConfig</span><span class="hljs-params">(String a_zookeeper, String a_groupId)</span> </span>&#123;<br>        Properties props = <span class="hljs-keyword">new</span> Properties();<br>        props.put(<span class="hljs-string">"zookeeper.connect"</span>, a_zookeeper);<br>        props.put(<span class="hljs-string">"group.id"</span>, a_groupId);<br>        props.put(<span class="hljs-string">"zookeeper.session.timeout.ms"</span>, <span class="hljs-string">"400"</span>);<br>        props.put(<span class="hljs-string">"zookeeper.sync.time.ms"</span>, <span class="hljs-string">"200"</span>);<br>        props.put(<span class="hljs-string">"auto.commit.interval.ms"</span>, <span class="hljs-string">"1000"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConsumerConfig(props);<br>    &#125;<br></code></pre></td></tr></table></figure><p>第二步即获取KafkaStream 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Integer&gt; topicCountMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>        topicCountMap.put(topic, <span class="hljs-keyword">new</span> Integer(a_numThreads));<br>        Map&lt;String, List&lt;KafkaStream&lt;<span class="hljs-keyword">byte</span>[], <span class="hljs-keyword">byte</span>[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);<br>        List&lt;KafkaStream&lt;<span class="hljs-keyword">byte</span>[], <span class="hljs-keyword">byte</span>[]&gt;&gt; streams = consumerMap.get(topic);<br></code></pre></td></tr></table></figure><p>第三步，用户可以根据迭代器逐个消费数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ConsumerIterator&lt;<span class="hljs-keyword">byte</span>[], <span class="hljs-keyword">byte</span>[]&gt; it = m_stream.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext())<br>            System.out.println(<span class="hljs-string">"Thread "</span> + m_threadNumber + <span class="hljs-string">": "</span> + <span class="hljs-keyword">new</span> String(it.next().message()));<br>        System.out.println(<span class="hljs-string">"Shutting down Thread: "</span> + m_threadNumber);<br></code></pre></td></tr></table></figure><p>完整样例见：<a href="https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Group+Example" target="_blank" rel="noopener">0.8 Using the High Level Consumer</a></p><h3 id="Consumer-API-1-0"><a href="#Consumer-API-1-0" class="headerlink" title="Consumer API(1.0)"></a>Consumer API(1.0)</h3><p>Kafka1.0版本中 Consumer API做了较大升级，主要特点如下：</p><ol><li>合并了0.8版本中 simple API和High-level API的功能；</li><li>维护了一组连接所需broker是的TCP连接；</li><li>该API<strong>不是线程安全的</strong>；</li><li>可以根据参数来确定是自动更新已消费的offset还是手动更新。</li></ol><p>自动更新（commit）offset：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Properties props = <span class="hljs-keyword">new</span> Properties();<br>props.put(<span class="hljs-string">"bootstrap.servers"</span>, <span class="hljs-string">"localhost:9092"</span>);<br>props.put(<span class="hljs-string">"group.id"</span>, <span class="hljs-string">"test"</span>);<br>props.put(<span class="hljs-string">"enable.auto.commit"</span>, <span class="hljs-string">"true"</span>);<br>props.put(<span class="hljs-string">"auto.commit.interval.ms"</span>, <span class="hljs-string">"1000"</span>);<br>props.put(<span class="hljs-string">"key.deserializer"</span>, <span class="hljs-string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>props.put(<span class="hljs-string">"value.deserializer"</span>, <span class="hljs-string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(props);<br>consumer.subscribe(Arrays.asList(<span class="hljs-string">"foo"</span>, <span class="hljs-string">"bar"</span>));<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>    ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records)<br>        System.out.printf(<span class="hljs-string">"offset = %d, key = %s, value = %s%n"</span>, record.offset(), record.key(), record.value());<br>&#125;<br></code></pre></td></tr></table></figure><p>手动更新（commit）offset：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">Properties props = <span class="hljs-keyword">new</span> Properties();<br>props.put(<span class="hljs-string">"bootstrap.servers"</span>, <span class="hljs-string">"localhost:9092"</span>);<br>props.put(<span class="hljs-string">"group.id"</span>, <span class="hljs-string">"test"</span>);<br>props.put(<span class="hljs-string">"enable.auto.commit"</span>, <span class="hljs-string">"false"</span>);<br>props.put(<span class="hljs-string">"key.deserializer"</span>, <span class="hljs-string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>props.put(<span class="hljs-string">"value.deserializer"</span>, <span class="hljs-string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);<br>KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(props);<br>consumer.subscribe(Arrays.asList(<span class="hljs-string">"foo"</span>, <span class="hljs-string">"bar"</span>));<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> minBatchSize = <span class="hljs-number">200</span>;<br>List&lt;ConsumerRecord&lt;String, String&gt;&gt; buffer = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>    ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>        buffer.add(record);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (buffer.size() &gt;= minBatchSize) &#123;<br>        insertIntoDb(buffer);<br>        consumer.commitSync();<br>        buffer.clear();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spark-读Kakfa0-8与0-10对比"><a href="#Spark-读Kakfa0-8与0-10对比" class="headerlink" title="Spark 读Kakfa0.8与0.10对比"></a>Spark 读Kakfa0.8与0.10对比</h2><p>note that the 0.8 integration is compatible with later 0.9 and 0.10 brokers, but the 0.10 integration is not compatible with earlier brokers.</p><table><thead><tr><th align="left"><a href="https://spark.apache.org/docs/2.2.0/streaming-kafka-0-8-integration.html" target="_blank" rel="noopener"> spark-streaming-kafka-0-8</a></th><th align="left"><a href="https://spark.apache.org/docs/2.2.0/streaming-kafka-0-10-integration.html" target="_blank" rel="noopener">spark-streaming-kafka-0-10</a></th><th></th></tr></thead><tbody><tr><td align="left">Broker Version</td><td align="left">0.8.2.1 or higher</td><td>0.10.0 or higher</td></tr><tr><td align="left">Api Stability</td><td align="left">Stable</td><td>Experimental</td></tr><tr><td align="left">Language Support</td><td align="left">Scala, Java, Python</td><td>Scala, Java</td></tr><tr><td align="left">Receiver DStream</td><td align="left">Yes</td><td>No</td></tr><tr><td align="left">Direct DStream</td><td align="left">Yes</td><td>Yes</td></tr><tr><td align="left">SSL / TLS Support</td><td align="left">No</td><td>Yes</td></tr><tr><td align="left">Offset Commit Api</td><td align="left">No</td><td>Yes</td></tr><tr><td align="left">Dynamic Topic Subscription</td><td align="left">No</td><td>Yes</td></tr></tbody></table><h2 id="Spark-DStream-类体系"><a href="#Spark-DStream-类体系" class="headerlink" title="Spark DStream 类体系"></a>Spark DStream 类体系</h2><p>从上表我们可以看到，对于kafka 0.8 版本，spark有两套读取API，<strong>Direct DStream</strong> 和 <strong>Receiver DStream</strong>。而对于kafka1.0 目前只支持 <strong>Direct DStream</strong>。我们先从DStream的类体系来看一下这两种方式的异同。</p><img src="/2019/05/21/spark-streaming-in-practice-2/DStream.png"><img src="/2019/05/21/spark-streaming-in-practice-2/image-20190522151509565.png"><img src="/2019/05/21/spark-streaming-in-practice-2/image-20190522151622748.png"><ul><li>DStream：定义了在RDD之上的基础数据流模型。1）定义了和RDD上类似的一组Transform和Action算子，如map、flatMap等；2）定义接口  <strong>def getOrCompute(time: Time): Option[RDD[T]]</strong>  返回时间区间内的RDD。</li><li>InputDStream：只在driver 上启动一个服务或线程来生成RDDs，可以实现该接口。 </li><li>ReceiverInputDStream：需要在worker上启动receiver来接收数据，需要实现该接口。ps:需要实现def getReceiver(): Receiver接口。</li><li>DirectKafkaInputDStream：基于InputDStream 和 Simple(Low-level) kafka Consumer API 实现。</li><li>KafkaInputDStream：基于 ReceiverInputDStream 和 High-level kafka Consumer API 实现。</li></ul><h2 id="Spark-读Kafka-0-8"><a href="#Spark-读Kafka-0-8" class="headerlink" title="Spark 读Kafka 0.8"></a>Spark 读Kafka 0.8</h2><p>从上表我们可以看到，对于kafka 0.8 版本，spark有两套读取API，<strong>Direct DStream</strong> 和 <strong>Receiver DStream</strong>。</p><h3 id="Receiver-DStream"><a href="#Receiver-DStream" class="headerlink" title="Receiver DStream"></a>Receiver DStream</h3><p>在 KafkaReceiver 的 onStart() 函数中：</p><img src="/2019/05/21/spark-streaming-in-practice-2/image-20190523184803340.png"><h3 id="Direct-DStream"><a href="#Direct-DStream" class="headerlink" title="Direct DStream"></a>Direct DStream</h3><img src="/2019/05/21/spark-streaming-in-practice-2/image-20190522151116173.png"><img src="/2019/05/21/spark-streaming-in-practice-2/image-20190522151230008.png"><h2 id="Spark-读Kafka-0-10"><a href="#Spark-读Kafka-0-10" class="headerlink" title="Spark 读Kafka 0.10"></a>Spark 读Kafka 0.10</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Group+Example" target="_blank" rel="noopener">0.8 Using the High Level Consumer</a></li><li><a href="https://kafka.apache.org/08/documentation.html" target="_blank" rel="noopener">kakfa0.8 官网文档</a></li><li><a href="https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example" target="_blank" rel="noopener">0.8.0 SimpleConsumer Example</a></li><li><a href="https://spark.apache.org/docs/2.1.0/streaming-kafka-integration.html#spark-streaming-kafka-integration-guide" target="_blank" rel="noopener">Spark Streaming + Kafka Integration Guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文章我们一起研究了Kafka的特性，kafka Producer API 以及Spark写API的方案，本文我们继续研究Spark 读取Kafka的方案。ps: 读比较复杂所以放在后面研究。同样的我们从Kakfa 的Consumer API开始。&lt;/p&gt;
    
    </summary>
    
      <category term="技术实践" scheme="https://blog.guopengfei.top/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="spark" scheme="https://blog.guopengfei.top/tags/spark/"/>
    
      <category term="streaming" scheme="https://blog.guopengfei.top/tags/streaming/"/>
    
      <category term="实践" scheme="https://blog.guopengfei.top/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Spark Streaming in Practice（一）——读写kafka之写Kafka</title>
    <link href="https://blog.guopengfei.top/2019/05/21/spark-streaming-in-practice/"/>
    <id>https://blog.guopengfei.top/2019/05/21/spark-streaming-in-practice/</id>
    <published>2019-05-21T00:32:49.000Z</published>
    <updated>2019-06-14T02:36:21.643Z</updated>
    
    <content type="html"><![CDATA[<p>记录Spark Streaming开发中的一些经验，有些是在当前理解下的个人总结，可能有失偏颇。无特别说明，下文中Spark 指Spark Streaming 应用。spark Streaming支持很多数据源，如file、socket但无疑Kakfa是其中最重要的streaming数据源，本文会对其重点研究研究。这一块基本思路是，首先看一下Kafka提供的基本的数据读写的API，然后再看一下Spark对相关API进一步封装提供了哪些功能。</p><a id="more"></a><h2 id="Kafka-基本概念"><a href="#Kafka-基本概念" class="headerlink" title="Kafka 基本概念"></a>Kafka 基本概念</h2><p>kafka是一个分布式的消息队列，即可以有生产者和消费者分别发布和订阅消息，kafka对消息进行持久化缓存，以使得生产者和消费者可以异步通信，并支持多个消费者复用消息。就像一个水池，可以有多个上游往水池中注水，也可以有多个下游从水池中取水。</p><ul><li>数据记录：每条数据记录由 key、 value和 timestamp组成。</li><li>kafka Broker: kafka由一到多个server组成，每个server称为Broker；每台机器上可以有一到多个broker，一组broker由zookeeper连接起来组成一个kafka集群。  Client(consumer或producer)和server(broker)通过<strong>TCP</strong>协议通信。</li><li>Topic：kafka定义Topic的概念来提升消息队列的并行度，即从应用上可以认为每个Topic是一个单独的消息队列。</li><li>Partition：像大多数分布式系统一样，kafka引入Partition(分区)来通过并行执行来提升性能（吞吐等），每个Topic会划分为多个partition，不同的partition分配给不同的broker来处理，所以Broker和Partition是多对多的关系。<strong>Produer 可以决定消息的分区规则，来分配到指定的partition</strong>。 注意：consumer的数量不能比partitions多（相同的consumer group），最多只会有partitions个consumer消费数据。</li><li>Replica（副本）: 像大多数分布式系统一样，kafka引入多副本(Replica)来提升系统容错性，即每个partition会有多个副本，遇到故障时保证还有备份数据可用。<strong>每个partition有一个broker作为leader还有0到多个broker作为follower。此处，kafka采用冷备机制，即leader提供数据的读写，follower只是被动的备份数据，只在leader出现故障时，从多个follower中选出新的leader。注意：因为对于不同的broker可以是不同的partition的leader，所以从整体上达到负载均衡的作用，即每个broker都有成为leader提供数据读写的机会</strong></li><li>offset：Partition中的每条Message由offset来表示它在这个partition中的偏移量，这个offset不是该Message在partition数据文件中的实际存储位置，而是逻辑上一个值，它唯一确定了partition中的一条Message。因此，可以认为offset是partition中Message的id。实际上，offset是kafka中唯一的元数据。</li><li>关于数据顺序：kafka只能保证数据在单个partition内是有序的。若只有一个consumer，则能保证Topic级别的有序。</li><li>持久化：kafka会按照设定的生命期缓存所有的消息，其使用文件存储消息(append only log)，为了减少磁盘写入的次数，broker会将消息暂时缓存在内存中，当消息的个数(或尺寸)达到一定阀值时，再flush到磁盘。</li><li>Segment：为了提升消息随机读的性能，kafka将数据文件分割为较小的segment。并通过索引来提升数据查询的性能，索引文件记录了offset对应的文件及具体位置。为了减少存储，offset存储的是相对于第一个offset的相对便宜，并没有存储所有offset的索引，而是有一定间隔的稀疏索引。</li><li>Consumer Group：在kafka中实际的订阅单位其实是consumer group，即每个Topic中的每条记录只会被一个consumer group消费一次。ps:同一个group中的多个consumer可以在不同的机器上。</li></ul><p><img src="http://kafka.apache.org/images/log_anatomy.png" alt="img"></p><h2 id="Kafka-0-8-Vs-0-10"><a href="#Kafka-0-8-Vs-0-10" class="headerlink" title="Kafka 0.8 Vs. 0.10"></a>Kafka 0.8 Vs. 0.10</h2><p>0.10 adds the following over 0.8</p><ul><li>Zookeeper connections are discouraged . From 0.10 there won’t be any zookeeper connections required . All connections for consuming data will be maintained by consumer API</li><li>new unified Consumer API</li><li>reduced client dependence on zookeeper (offsets stored in Kafka topic)</li><li>Kafka Streams API</li><li>Kafka Connect API</li><li>transport encryption using TLS/SSL</li><li>Kerberos/SASL Authentication support</li><li>Access Control Lists</li><li>timestamps on messages</li><li>client interceptors</li><li>lots and lots of bug fixes and improvements</li></ul><p>从上，我们可以看出，0.10版本在0.8版本的基础上除了扩充功能，<strong>主要是对consumer API的重构</strong>。</p><h2 id="Kakfa-Producer-API"><a href="#Kakfa-Producer-API" class="headerlink" title="Kakfa Producer API"></a>Kakfa Producer API</h2><p>Producer API有如下特性：</p><ol><li>有同步和异步两种数据处理方式，用配置producer.type=async/sync来区分，默认是sync。其中异步方式会将数据进行缓存，直到达到缓存时间阈值或batch大小阈值才会进行发送；</li><li>用户自定义数据分区函数；</li><li>用户自定义数据序列化接口；</li></ol><p>在<strong>Kafka 0.8.0 官网文档</strong>上说 可以使用zookeeper来支持 broker的发现，但是在<strong>0.8.0 Producer Example</strong> 文档中，又推荐使用的是<strong>metadata.broker.list</strong> 参数。</p><img src="/2019/05/21/spark-streaming-in-practice/image-20190521185118875.png"><p>经测试验证，应该使用<strong>metadata.broker.list</strong> 否则会报缺少参数。 </p><p>配置的时候不需要配置所有的brokerlist，只需要配置两个(容错)就可以了，kafka会自动做负载均衡，选出合适的leader。</p><h2 id="Spark-写Kafka"><a href="#Spark-写Kafka" class="headerlink" title="Spark 写Kafka"></a>Spark 写Kafka</h2><p>spark streaming/spark写Kafka的一个可行方法是，对每个executor 调用创建Kafka Producer 客户端，各分区单独发送数据，样例大体结构如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala">result.foreachRDD&#123;rdd=&gt;<br>  rdd.foreachPartition&#123; iter=&gt;<br>    <span class="hljs-comment">// 调用kafka Producer 发送数据</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但需要注意Producer 实例尽量复用，以提升性能。</p><p>Cloudera封装好了一个工具帮我们完成该过程，(原始代码已经找不到，是否复用Producer实例未验证)，该工具其实是从 <a href="https://issues.apache.org/jira/browse/SPARK-4122" target="_blank" rel="noopener">Jira-4-22</a> 拆分出来的。Maven坐标如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.cloudera.spark.streaming.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-kafka-writer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><p>从<a href="https://mvnrepository.com/artifact/org.cloudera.spark.streaming.kafka/spark-kafka-writer" target="_blank" rel="noopener">MavenPository</a> 中看到，最新的版本还是0.1.0，更新日期是 2015年，不确定是有更好的方案还是什么原因，造成该工具一直没有升级。</p><img src="/2019/05/21/spark-streaming-in-practice/image-20190521162901199.png"><p>源码：<a href="https://github.com/harishreedharan/spark-streaming-kafka-output" target="_blank" rel="noopener">https://github.com/harishreedharan/spark-streaming-kafka-output</a></p><p>ps: 该项目描述中标注了 “Move to org.cloudera “，所以这很大的可能性是该工具的源码。从代码可以看到，其实现跟上述分析的方案一致。</p><p>如下代码样例，该工具封装了隐式转换，导入后DStream类型会添加 <em>writeToKafka</em> 函数，并且用户自己添加自定义的<strong>分区函数</strong>。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> org.cloudera.spark.streaming.kafka.<span class="hljs-type">KafkaWriter</span>._<br><br>stream.writeToKafka(producerConf,<br>            (x: <span class="hljs-type">String</span>) =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">KeyedMessage</span>[<span class="hljs-type">String</span>, <span class="hljs-type">String</span>](topic,<span class="hljs-type">DigestUtils</span>.md5Hex(x), x))<br></code></pre></td></tr></table></figure><p>kafka的config会透传下去，到kafka原生Producer API。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://www.cnblogs.com/seaspring/p/6138080.html" target="_blank" rel="noopener">Kafka：架构简介【转】</a></p></li><li><p><a href="https://www.cnblogs.com/yurunmiao/p/5550906.html" target="_blank" rel="noopener">Kafka Topic Partition Replica Assignment实现原理及资源隔离方案</a></p></li><li><p><a href="http://kafka.apache.org/08/documentation.html" target="_blank" rel="noopener">Kafka 0.8.0 官网文档</a></p></li><li><p><a href="https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+Producer+Example" target="_blank" rel="noopener">0.8.0 Producer Example</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录Spark Streaming开发中的一些经验，有些是在当前理解下的个人总结，可能有失偏颇。无特别说明，下文中Spark 指Spark Streaming 应用。spark Streaming支持很多数据源，如file、socket但无疑Kakfa是其中最重要的streaming数据源，本文会对其重点研究研究。这一块基本思路是，首先看一下Kafka提供的基本的数据读写的API，然后再看一下Spark对相关API进一步封装提供了哪些功能。&lt;/p&gt;
    
    </summary>
    
      <category term="技术实践" scheme="https://blog.guopengfei.top/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="spark" scheme="https://blog.guopengfei.top/tags/spark/"/>
    
      <category term="streaming" scheme="https://blog.guopengfei.top/tags/streaming/"/>
    
      <category term="实践" scheme="https://blog.guopengfei.top/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Spark存储体系详解</title>
    <link href="https://blog.guopengfei.top/2019/05/15/Spark%E5%AD%98%E5%82%A8%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.guopengfei.top/2019/05/15/Spark存储体系详解/</id>
    <published>2019-05-15T02:08:16.000Z</published>
    <updated>2019-06-14T02:36:21.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存储体系的职责"><a href="#存储体系的职责" class="headerlink" title="存储体系的职责"></a>存储体系的职责</h2><p>在研究Spark存储体系之前，我们先搞清楚一个重要的问题：<strong>对于一个数据计算引擎，存储体系在其中的职责是什么？或者说功能定位是什么？</strong> 而子模块肯定是为整个系统服务的，所以我们可以从 计算引擎(Spark)本身功能来一探究竟。</p><p>一个数据计算引擎，最主要的是对数据进行各种加工（转换、过滤、聚合、合并、统计等），我们可以将对数据的加工当成数据状态的转换。所以计算引擎的核心功能就是 定义<strong>数据状态</strong> 及定义<strong>数据状态之上的各种操作</strong>，对应于Spark即是，RDD 及之上的各种Transform和Action操作，所以Spark存储体系应该包括对RDD的存储。</p><a id="more"></a><p>输入是外部系统不算Spark本身的存储体系，Spark执行时会将整个作业按照数据依赖情况构建成DAG划分成多个Stage，Stage间涉及到数据的生成和传输(Shuffle阶段) 此处涉及到存储体系，涉及到的功能有数据存储、数据寻址，数据读取和数据远程传输。</p><p>在数据处理中，涉及到一个数据对应多路处理的情况，无论用户是否显式的调用Cache，这都涉及到RDD<strong>复用</strong>，即涉及到中间结果的存储，此处会用到存储体系，涉及到的功能也是数据的存储、寻址和读取。</p><p>Spark 提供了Broadcast功能可以将小的数据集同步到多个节点上，该功能也涉及数据的存储、寻址、读取和远程传输。</p><h2 id="Spark存储体系主要功能"><a href="#Spark存储体系主要功能" class="headerlink" title="Spark存储体系主要功能"></a>Spark存储体系主要功能</h2><p>根据以上分析，我们知道Spark存储体系主要功能为：</p><ul><li>资源的申请：对于磁盘即创建目录、文件；对于内存即变量的创建、销毁。磁盘资源相对比较丰富，在需要时再去创建目录、文件是完全没问题的，所以不需要太复杂的资源管理。而内存资源是很稀缺的，如果在需要时再去申请很可能出现系统没有足够的内存分配的情况，而如果不加节制的申请也可能自己把系统内存占光，造成其他任务不能执行，这样就会出现很大的不确定性。Spark采用预申请内存资源，自己管理内存资源的方式来确保一个更稳定的内存环境。</li><li>数据存储、读取：具体数据的读写。ps: Spark定义数据存储的最小单元为Block。</li><li><strong>数据寻址(单节点、集群中)</strong>：为了区分各Block，每个Block有唯一的标识Id(BlockId)。对于数据的查询，一方面，需要确定在具体哪个节点上（<strong>集群中寻址</strong>）；另一方面，需要确定在具体节点的内存中还是磁盘中，具体路径或引用是什么（<strong>节点中具体数据寻址</strong>）。</li><li>数据远程传输：Broadcast、Shuffle之类的操作涉及到数据的跨节点传输，所以需要有数据远程传输功能。</li></ul><h2 id="Spark中存储体系相关的类"><a href="#Spark中存储体系相关的类" class="headerlink" title="Spark中存储体系相关的类"></a>Spark中存储体系相关的类</h2><p>确定了Spark存储体系所提供的功能，我们再来看看Spark中存储体系相对应的具体的实现类。</p><ul><li><p>BlockId:  Block是Spark存储体系中，数据管理的基本单位；BlockId是数据块的唯一标识。</p></li><li><p>BlockInfo：Block的元数据信息，如存储Level(StorageLevel)等。</p></li><li><p>StorageLevel：定义了存储级别，内存还是磁盘，序列化还是非序列化，几个副本。</p></li><li><p><strong>BlockInfoManager</strong>：使用一个Map来映射BlockId和其对应的BlockInfo; 另外维护了每个Block的读锁和写锁。</p></li><li><p>BlockResult：Block的数据结果，包括数据读取接口。</p></li><li><p><strong>BlockManager</strong>：每个节点(driver、executor)中管理数据的接口，屏蔽了底层存储细节（内存、磁盘、序列化方式）。</p></li><li><p>BlockManagerId：Blockmanager的唯一标识。</p></li><li><p><strong>BlockMangerMasterEndpoint</strong>：维护集群中所有的BlockManager及其维护的Block</p></li><li><p>BlockManagerMaster：各BlockManager与 BlockMangerMasterEndpoint 通信的代理（RPC客户端）。</p></li><li><p><strong>MapOutTracher</strong>：用于找到某Reduce对应的上游Block所在的位置。</p></li><li><p>BlockManagerSlaveEndpoint：各BlockManager中对外提供服务的RPC服务端，用于接收对该节点数据处理的请求（主要是删除数据）。</p></li><li><p>DiskStore：文件读写。</p></li><li><p>MemoryStore：内存读写管理，并根据存储级别将数据转存到磁盘等。</p></li><li><p>DiskBlockManager：资源申请，创建目录、文件等。</p></li><li><p>MemoryPool：预申请的内存空间，主要有四块，堆内执行内存、堆内存储内存、堆外执行内存和堆外存储内存。</p></li><li><p>MemoryManager：对预申请的内存进行分配与回收。目前有<a href="https://github.com/apache/spark/blob/branch-1.6/core/src/main/scala/org/apache/spark/memory/StaticMemoryManager.scala" target="_blank" rel="noopener">StaticMemoryManager</a> 和 <a href="https://github.com/apache/spark/blob/branch-1.6/core/src/main/scala/org/apache/spark/memory/UnifiedMemoryManager.scala" target="_blank" rel="noopener">UnifiedMemoryManager</a> 两种内存管理器，这里Static和Unified是相对执行内存和存储内存的关系来说的。Static即执行内存和存储内存各自空间相对是静态的、固定的；而Unified管理方式下对执行内存和存储内存统一管理，两者可以相互借用。</p></li><li><p>ShuffleClient：用于Block上传、下载的接口。</p></li><li><p>BlockTransferService：ShuffleClient底层的面向网络RPC的数据传输服务。</p></li></ul><p>对这些类有个整体的认识，再去看源码应该会容易很多。</p><p>下面有两张图，比便于对Spark存储体系的整体认识，从网上直接粘过来的，把原文链接放在了参考资料里。</p><p>这张图跟《Spark内核设计的艺术》的一样，姑且作为出处：</p><img src="/2019/05/15/Spark存储体系详解/spark-storage-system.png"><p>这张图见参考资料：</p><img src="/2019/05/15/Spark存储体系详解/spark-store.png"><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p> <a href="https://www.cnblogs.com/cenglinjinran/p/8476199.html" target="_blank" rel="noopener">Spark存储体系</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;存储体系的职责&quot;&gt;&lt;a href=&quot;#存储体系的职责&quot; class=&quot;headerlink&quot; title=&quot;存储体系的职责&quot;&gt;&lt;/a&gt;存储体系的职责&lt;/h2&gt;&lt;p&gt;在研究Spark存储体系之前，我们先搞清楚一个重要的问题：&lt;strong&gt;对于一个数据计算引擎，存储体系在其中的职责是什么？或者说功能定位是什么？&lt;/strong&gt; 而子模块肯定是为整个系统服务的，所以我们可以从 计算引擎(Spark)本身功能来一探究竟。&lt;/p&gt;
&lt;p&gt;一个数据计算引擎，最主要的是对数据进行各种加工（转换、过滤、聚合、合并、统计等），我们可以将对数据的加工当成数据状态的转换。所以计算引擎的核心功能就是 定义&lt;strong&gt;数据状态&lt;/strong&gt; 及定义&lt;strong&gt;数据状态之上的各种操作&lt;/strong&gt;，对应于Spark即是，RDD 及之上的各种Transform和Action操作，所以Spark存储体系应该包括对RDD的存储。&lt;/p&gt;
    
    </summary>
    
      <category term="技术原理" scheme="https://blog.guopengfei.top/categories/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="spark" scheme="https://blog.guopengfei.top/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>初探Flink之编程模型</title>
    <link href="https://blog.guopengfei.top/2019/05/13/Hello-Flink/"/>
    <id>https://blog.guopengfei.top/2019/05/13/Hello-Flink/</id>
    <published>2019-05-13T02:03:53.000Z</published>
    <updated>2019-06-14T02:36:21.636Z</updated>
    
    <content type="html"><![CDATA[<p>我们从官网文档开始，一窥Flink初貌。(<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/" target="_blank" rel="noopener">https://ci.apache.org/projects/flink/flink-docs-release-1.8/</a>)</p><p>在学习Flink时，我们以和spark的对比，作为很重要的一条线来贯穿始终，通过对比两者的异同，来进一步理解分布式计算中需要解决的问题，及其解决方案。</p><a id="more"></a><p>Flink官网对其定义如下：        </p><p>Apache Flink is an open source platform for distributed stream and batch data processing.Flink’s core is a streaming dataflow engine that provides data distribution, communication, and fault tolerance for distributed computations over data streams. Flink builds batch processing on top of the streaming engine, overlaying native iteration support, managed memory, and program optimization.</p><p>从上述定义，我们了解到：</p><ol><li>Flink是一个开源的流处理和批处理平台；</li><li>Flink的核心是流处理引擎；</li><li>批处理功能建立在流引擎之上。</li></ol><p><strong>与Spark异同</strong></p><ol><li>从功能定位来看，两者非常非常相似，都同时支持流计算和批处理；</li><li>Spark 把流处理建立在批处理引擎上，流处理是微批处理计算；</li><li>Flink把批处理建立在流处理引擎上，批处理是一个有限流。</li></ol><p>官网文档给出了学习路径建议：</p><ol><li>基础概念学习 (<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/concepts/programming-model.html" target="_blank" rel="noopener">Dataflow Programming Model</a>  和 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/concepts/runtime.html" target="_blank" rel="noopener">Distributed Runtime Environment</a> )</li><li>学习导引<ul><li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/tutorials/datastream_api.html" target="_blank" rel="noopener">Implement and run a DataStream application</a></li><li><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/tutorials/local_setup.html" target="_blank" rel="noopener">Setup a local Flink cluster</a></li></ul></li></ol><p>下面我们就按照这个顺利来逐步深入，一窥究竟。</p><h2 id="整体架构分层"><a href="#整体架构分层" class="headerlink" title="整体架构分层"></a>整体架构分层</h2><p>Flink 将整个架构分成如下四层：</p><ul><li>Stateful Stream Processing:  定义了最核心的任务模型和最底层处理函数；</li><li>Core APIs : 定义了批处理和流处理相关的API；</li><li>Table API：定义了一个更高层的面向Table 抽象的API，即数据有schema ，定义了Table上常用的各种操作(select，filter，group by)等；</li><li>SQL ：SQL接口。</li></ul><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.8/fig/levels_of_abstraction.svg" alt="Programming levels of abstraction"></p><p>与Spark异同</p><ol><li><p>整体结构两者非常类似；</p></li><li><p>Flink中 流处理和批处理更加一致）;</p><ul><li><p>Spark中 基于RDD(最核心模型、批处理)创建了DataFrame（Table API）和Streaming(流处理)又分别在DataFrame和Streaming之上创建了 spark sql 和 struct streaming接口</p></li><li><p>而从上图可以很容易的看出flink对待流处理和批处理的一致性，ps: 阿里在致力于让两者更加一致。</p></li></ul></li><li><p>Flink各层概念及定位更加清晰，可能更两者的发展有关，Spark是慢慢生长出来的，而Flink是阿里在其幼小时（2015年），大刀阔斧的改出来的，这个时期Spark已经是1.4版本（Spark和Flink 各 release版本见附录），其批处理、流处理及DataFrame已经比较完善。</p></li></ol><p>ps: 只是初步印象，待深入研究结论未必如此。</p><h2 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h2><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.8/fig/program_dataflow.svg" alt="A DataStream program, and its dataflow."></p><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.8/fig/parallel_dataflow.svg" alt="A parallel dataflow"></p><p>Flink的编程模型，主要是 <strong>Stream</strong> 及其上的 <strong>Transformations</strong>， 其中Stream 定义了分布式数据模型，Transformations 定义了 不同的Stream 所支持的各种操作（从上图也可以看出与Spark代码惊人的相似）。  </p><p><strong>与Spark异同</strong></p><ol><li><p>两者及其相似，核心都是分布式数据模型，及其上的操作组成；</p></li><li><p>Spark 将操作分为 Transform(Lazy 操作，定义了数据模型的各种变换) 和 Action(真正触发 Job的执行)；</p></li><li><p>正如两者的核心理念不同，Spark基于批处理RDD模型，Flink 基于流处理 Stream模型。</p></li><li><p>执行时都会将代码生成 DAG（<strong>directed acyclic graphs</strong>）；</p></li><li><p>区分不同的操作依赖上游一个分区或多个分区的情况（Spark中窄依赖和宽依赖，Flink中<strong>One-to-one</strong>和<strong>Redistributing</strong>）。</p></li></ol><p>   思考：两者一个以流计算为核心，一个以批处理为核心，会是两者不可逾越的鸿沟吗？还是最终会渐渐一致？ </p><h2 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>和批处理不同的是，流处理面对的数据是无限的，所以不能对一个流的所有数据进行处理，因此需要将一个无限流划分出一些有限的窗口，对每个窗口内的数据进行计算。</p><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.8/fig/windows.svg" alt="Time- and Count Windows"></p><ul><li>可以按照时间(如每5秒)也可以按照数据量(如每500条数据)来划分窗口；</li><li>Flink 定义了多种窗口类型以应对不同的业务需求，如 <em>tumbling windows</em> (无重叠), <em>sliding windows</em> (窗口间有重叠), and <em>session windows</em> (定义不活跃时间间隔来划分窗口).</li></ul><h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.8/fig/event_ingestion_processing_time.svg" alt="Event Time, Ingestion Time, and Processing Time"></p><p>Flink中可以按照以下三种时间来进行数据对齐处理：</p><ul><li>Event Time： 事件时间，通常是日志中打的行为发生时的时间戳；</li><li>Ingestion Time： 事件进入Flink 的时间；</li><li>Processing Time： Flink任务执行时的本地时间。</li></ul><h3 id="Stateful-Operations"><a href="#Stateful-Operations" class="headerlink" title="Stateful Operations"></a>Stateful Operations</h3><p>有些业务场景中，需要对多条Event记录进行汇总统计，而不是逐条记录单独处理。这种情况下的操作成为 Stateful(有状态)的。</p><p>在实现上，其实Flink维护了一个类似Key-Value的结构来记录各state。</p><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.8/fig/state_partitioning.svg" alt="State and Partitioning"></p><h3 id="Checkpoints-容错"><a href="#Checkpoints-容错" class="headerlink" title="Checkpoints 容错"></a>Checkpoints 容错</h3><p>Flink 使用checkpoint和回放（stream replay）机制来做容错机制。</p><p>所谓checkpoint即定时的将数据的镜像进行持久化存储。当遇到故障时，从镜像点开始从新计算数据。</p><p>需要在checkpoint 保存周期和 故障时数据恢复时间之间做一个权衡。</p><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p>Flink 将批处理当成一种特殊的流(有限的流)，但Flink也有针对批处理的离线特性做一些优化：</p><ul><li>批处理不适用 checkpoint 进行容错，遇到故障时从头（对应分区）计算数据；</li><li>Stateful操作使用 in-memory/out-of-core数据结构，而不是使用 k-v 索引；(需要进一步研究)</li><li>有一些批处理独有的异步API。</li></ul><h2 id="附录一：Spark各版本发布时间"><a href="#附录一：Spark各版本发布时间" class="headerlink" title="附录一：Spark各版本发布时间"></a>附录一：Spark各版本发布时间</h2><table><thead><tr><th align="center">Version</th><th align="center">Original release date</th><th align="center">Latest version</th><th align="center">Release date</th></tr></thead><tbody><tr><td align="center">0.5</td><td align="center">2012-06-12</td><td align="center">0.5.1</td><td align="center">2012-10-07</td></tr><tr><td align="center">0.6</td><td align="center">2012-10-14</td><td align="center">0.6.2</td><td align="center">2013-02-07<a href="https://en.wikipedia.org/wiki/Apache_Spark#cite_note-37" target="_blank" rel="noopener">[36]</a></td></tr><tr><td align="center">0.7</td><td align="center">2013-02-27</td><td align="center">0.7.3</td><td align="center">2013-07-16</td></tr><tr><td align="center">0.8</td><td align="center">2013-09-25</td><td align="center">0.8.1</td><td align="center">2013-12-19</td></tr><tr><td align="center">0.9</td><td align="center">2014-02-02</td><td align="center">0.9.2</td><td align="center">2014-07-23</td></tr><tr><td align="center">1.0</td><td align="center">2014-05-26</td><td align="center">1.0.2</td><td align="center">2014-08-05</td></tr><tr><td align="center">1.1</td><td align="center">2014-09-11</td><td align="center">1.1.1</td><td align="center">2014-11-26</td></tr><tr><td align="center">1.2</td><td align="center">2014-12-18</td><td align="center">1.2.2</td><td align="center">2015-04-17</td></tr><tr><td align="center">1.3</td><td align="center">2015-03-13</td><td align="center">1.3.1</td><td align="center">2015-04-17</td></tr><tr><td align="center">1.4</td><td align="center">2015-06-11</td><td align="center">1.4.1</td><td align="center">2015-07-15</td></tr><tr><td align="center">1.5</td><td align="center">2015-09-09</td><td align="center">1.5.2</td><td align="center">2015-11-09</td></tr><tr><td align="center">1.6</td><td align="center">2016-01-04</td><td align="center">1.6.3</td><td align="center">2016-11-07</td></tr></tbody></table><h2 id="附录二：-Flink-各版本发布时间"><a href="#附录二：-Flink-各版本发布时间" class="headerlink" title="附录二： Flink 各版本发布时间"></a>附录二： Flink 各版本发布时间</h2><table><thead><tr><th align="center">Version</th><th align="center">Original release date</th><th align="center">Latest version</th><th align="center">Release date</th></tr></thead><tbody><tr><td align="center">0.9</td><td align="center">2015-06-24</td><td align="center">0.9.1</td><td align="center">2015-09-01</td></tr><tr><td align="center">0.10</td><td align="center">2015-11-16</td><td align="center">0.10.2</td><td align="center">2016-02-11</td></tr><tr><td align="center">1.0</td><td align="center">2016-03-08</td><td align="center">1.0.3</td><td align="center">2016-05-11</td></tr><tr><td align="center">1.1</td><td align="center">2016-08-08</td><td align="center">1.1.5</td><td align="center">2017-03-22</td></tr><tr><td align="center">1.2</td><td align="center">2017-02-06</td><td align="center">1.2.1</td><td align="center">2017-04-26</td></tr><tr><td align="center">1.3</td><td align="center">2017-06-01</td><td align="center">1.3.3</td><td align="center">2018-03-15</td></tr><tr><td align="center">1.4</td><td align="center">2017-12-12</td><td align="center">1.4.2</td><td align="center">2018-03-08</td></tr><tr><td align="center">1.5</td><td align="center">2018-05-25</td><td align="center">1.5.6</td><td align="center">2018-12-26</td></tr><tr><td align="center">1.6</td><td align="center">2018-08-08</td><td align="center">1.6.3</td><td align="center">2018-12-22</td></tr><tr><td align="center">1.7</td><td align="center">2018-11-30</td><td align="center">1.7.2</td><td align="center">2019-02-15</td></tr><tr><td align="center"><strong>1.8</strong></td><td align="center">2019-04-09</td><td align="center">1.8.0</td><td align="center">2019-04-09</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们从官网文档开始，一窥Flink初貌。(&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ci.apache.org/projects/flink/flink-docs-release-1.8/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;在学习Flink时，我们以和spark的对比，作为很重要的一条线来贯穿始终，通过对比两者的异同，来进一步理解分布式计算中需要解决的问题，及其解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="技术原理" scheme="https://blog.guopengfei.top/categories/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="flink" scheme="https://blog.guopengfei.top/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>spark源码解析alpha-0.1</title>
    <link href="https://blog.guopengfei.top/2019/02/15/spark%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90alpha-0-1RDD%E4%B8%8E%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    <id>https://blog.guopengfei.top/2019/02/15/spark源码解析alpha-0-1RDD与任务调度/</id>
    <published>2019-02-15T02:26:07.000Z</published>
    <updated>2019-06-14T02:36:21.645Z</updated>
    
    <content type="html"><![CDATA[<p>Spark源码：<a href="https://github.com/apache/spark.git" target="_blank" rel="noopener">https://github.com/apache/spark.git</a> </p><p>版本号：alpha-0.1</p><p>Spark最核心的概念是RDD（分布式弹性数据集）数据模型，在alpha-0.1版本中实现了RDD数据模型及在其上的任务调度系统，另外还实现了Broadcast和Accumulator工具以及SparkContext接口和spark-shell接口，下面对其分别做介绍。</p><a id="more"></a><h1 id="RDD与任务调度"><a href="#RDD与任务调度" class="headerlink" title="RDD与任务调度"></a>RDD与任务调度</h1><p>​    百度百科对RDD介绍如下：<em>RDD(Resilient Distributed Datasets)，弹性分布式数据集，是分布式内存的一个抽象概念。RDD提供了一种高度受限的共享内存模型，即RDD是只读的记录分区的集合，只能通过在其他RDD执行确定的转换操作（如map、join和group by）而创建，然而这些限制使得实现容错的开销很低。​</em></p><p>​        我们可以将RDD看成一个链表，链表的每个节点在上一个节点数据的基础上增加了一些操作而生成。计算最终数据时，只需按照链表上的操作顺序对数据进行计算即可。</p><p>data -&gt;f1(data)-&gt;f2(f1(data))……-&gt;fn(…f1(data)…)</p><p>RDD将数据分成多个split，每个split可以单独形成操作链表，及整个RDD成为了一组链表。</p><p>不同的操作产生不同的RDD即形成了RDD的类体系。</p><h2 id="RDD的API"><a href="#RDD的API" class="headerlink" title="RDD的API"></a>RDD的API</h2><p>RDD的函数可以分为两类，一类是用户接口算子，包括对数据进行操作的transform算子，如map、filter、reduce等和触发任务执行的Action算子如 count、collect、foreach等；另一类是任务执行时需要的函数，如split、iterator等，子类通过复写这些函数来实现不同的子RDD。在alpha-0.1版本中RDD实现了以下函数:</p><p><strong>执行函数（子类重载）</strong></p><ul><li>def splits: Array[Split]    获取数据分片</li><li>def iterator(split: Split): Iterator[T]   数据分片上的迭代器</li><li>def preferredLocations(split: Split): Seq[String]  数据分片引用的数据地址</li><li>def taskStarted(split: Split, slot: SlaveOffer) 任务是否启动</li></ul><p><strong>Transform算子</strong></p><ul><li>def map(f: T =&gt; U):MappedRDD</li><li>def filter(f: T =&gt; Boolean):FilteredRDD</li><li>def aggregateSplit():SplitRDD</li><li>def cache():CachedRDD</li><li>def def sample(withReplacement: Boolean, frac: Double,seed: Int):SampledRDD</li><li>def flatMap(f: T =&gt; Traversable[U]):FlatMappedRDD</li></ul><p><strong>Action算子</strong></p><ul><li>def foreach(f: T =&gt; Unit):Unit</li><li>def collect(): Array[T]</li><li>def toArray(): Array[T]</li><li>def reduce(f: (T, T) =&gt; T): T</li><li>def take(num: Int): Array[T]</li><li>def first: T</li><li>def count(): Long</li><li>def union(other: RDD[T]):UnionRDD</li><li>def ++(other: RDD[T]):UnionRDD</li><li>def cartesian(other: RDD[U]):CartesianRDD</li></ul><h2 id="RDD类体系"><a href="#RDD类体系" class="headerlink" title="RDD类体系"></a>RDD类体系</h2><p>RDD分为两大类，一类根据外部数据生成，是RDD的起点，在alpha-0.1版本中只有HdfsTextFile 和ParallelArray；另一类是在RDD增加操作产生，如 MappedRDD、FilteredRDD等，该类RDD和transform算子相对应。继承体系如下：</p><img src="/2019/02/15/spark源码解析alpha-0-1RDD与任务调度/RDDUml.png"><img src="/2019/02/15/spark源码解析alpha-0-1RDD与任务调度/SplitUML.png"><p>alpha-0.1中实现的RDD有：</p><ul><li>HdfsTextFile(sc: SparkContext, path: String)</li><li>ParallelArray(sc: SparkContext, data: Seq[T], numSlices: Int)</li><li>MappedRDD(prev: RDD[T], f: T =&gt; U)</li><li>FilteredRDD(prev: RDD[T], f: T =&gt; Boolean)</li><li>FlatMappedRDD(prev: RDD[T], f: T =&gt; Traversable[U])</li><li>SplitRDD(prev: RDD[T])</li><li>SampledRDD(prev: RDD[T], withReplacement: Boolean, frac: Double, seed: Int)</li><li>CachedRDD(prev: RDD[T])</li><li>UnionRDD(sc: SparkContext, rdd1: RDD[T], rdd2: RDD[T])</li><li>CartesianRDD(sc: SparkContext, rdd1: RDD[T], rdd2: RDD[U])</li></ul><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p>如上所述，Action算子会产生任务，并触发任务的提交。下面我们以foreach为例，追踪任务调度流程。</p><ol><li>在action算子（foreach）中，对每个分区(split)生成Task（ForeachTask）实例，并调用sc（SparkContext）中的 runTaskObjects函数来执行任务。</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foreach</span></span>(f: <span class="hljs-type">T</span> =&gt; <span class="hljs-type">Unit</span>) &#123;<br>  <span class="hljs-keyword">val</span> cleanF = sc.clean(f)<br>  <span class="hljs-keyword">val</span> tasks = splits.map(s =&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">ForeachTask</span>(<span class="hljs-keyword">this</span>, s, cleanF)).toArray<br>  sc.runTaskObjects(tasks)<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在SparkContext的 runTaskObjects函数中，调用 Scheduler实例的 runTasks函数来执行任务。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SparkContext</span>(<span class="hljs-params">master: <span class="hljs-type">String</span>, frameworkName: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Logging</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span>[spark] <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">runTaskObjects</span></span>[<span class="hljs-type">T</span>: <span class="hljs-type">ClassManifest</span>](tasks: <span class="hljs-type">Seq</span>[<span class="hljs-type">Task</span>[<span class="hljs-type">T</span>]])<br>      : <span class="hljs-type">Array</span>[<span class="hljs-type">T</span>] = &#123;<br>    logInfo(<span class="hljs-string">"Running "</span> + tasks.length + <span class="hljs-string">" tasks in parallel"</span>)<br>    <span class="hljs-keyword">val</span> start = <span class="hljs-type">System</span>.nanoTime<br>    <span class="hljs-keyword">val</span> result = scheduler.runTasks(tasks.toArray)<br>    logInfo(<span class="hljs-string">"Tasks finished in "</span> + (<span class="hljs-type">System</span>.nanoTime - start) / <span class="hljs-number">1e9</span> + <span class="hljs-string">" s"</span>)<br>    <span class="hljs-keyword">return</span> result<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Scheduler与Task类体系"><a href="#Scheduler与Task类体系" class="headerlink" title="Scheduler与Task类体系"></a>Scheduler与Task类体系</h2><img src="/2019/02/15/spark源码解析alpha-0-1RDD与任务调度/SchedulerUML.png"><h1 id="SparkContext"><a href="#SparkContext" class="headerlink" title="SparkContext"></a>SparkContext</h1><p>SparkContext有两大职责，一方面管理着spark运行所需的环境，在alpha-0.1中主要是 任务调度器Scheduler；另一方面向用户提供了编程API。主要函数如下：</p><p><strong>运行环境</strong></p><ul><li>scheduler: Scheduler   任务调度器 </li><li>def runTasks(tasks: Array[() =&gt; T]): Array[T]   任务执行函数（由rdd的action算子调用）</li></ul><p><strong>编程API</strong></p><ul><li>def textFile(path: String) : HdfsTextFile</li><li>def parallelize(seq: Seq[T], numSlices: Int):ParallelArray[T]</li><li>def parallelize(seq: Seq[T]):ParallelArray[T]</li><li>def accumulator():Accumulator   </li><li>def broadcast(value: T):CentralizedHDFSBroadcast</li></ul><img src="/2019/02/15/spark源码解析alpha-0-1RDD与任务调度/SparkContextUML.png"><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>Spark-alpha-0.1源码解读：<a href="https://www.jianshu.com/p/795302f94fa1" target="_blank" rel="noopener">https://www.jianshu.com/p/795302f94fa1</a></li><li>百度百科：<a href="https://baike.baidu.com/item/RDD/5840158" target="_blank" rel="noopener">https://baike.baidu.com/item/RDD/5840158</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spark源码：&lt;a href=&quot;https://github.com/apache/spark.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/apache/spark.git&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;版本号：alpha-0.1&lt;/p&gt;
&lt;p&gt;Spark最核心的概念是RDD（分布式弹性数据集）数据模型，在alpha-0.1版本中实现了RDD数据模型及在其上的任务调度系统，另外还实现了Broadcast和Accumulator工具以及SparkContext接口和spark-shell接口，下面对其分别做介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="技术原理" scheme="https://blog.guopengfei.top/categories/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="spark" scheme="https://blog.guopengfei.top/tags/spark/"/>
    
      <category term="源码" scheme="https://blog.guopengfei.top/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>SparkStreaming反压机制详解</title>
    <link href="https://blog.guopengfei.top/2019/01/04/SparkStreaming%E5%8F%8D%E5%8E%8B%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.guopengfei.top/2019/01/04/SparkStreaming反压机制详解/</id>
    <published>2019-01-04T04:24:03.000Z</published>
    <updated>2019-06-14T02:36:21.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景概念"><a href="#背景概念" class="headerlink" title="背景概念"></a>背景概念</h1><ul><li>DStream： 表示一系列时间序列上连续的RDDs。</li><li>Batch Duration：spark streaming的核心参数，设置流数据被分成多个batch的时间间隔，每个spark引擎处理的就是这个时间间隔内的数据。</li><li>InputDStream：InputDStream继承自DStream，是所有输入流的基类，代表从源接收到的原始数据流DStreams，每一个InputDStream关联到单个Receiver对象，从源数据接收数据并存储到spark内存，等待处理。</li></ul><a id="more"></a><h1 id="反压是什么"><a href="#反压是什么" class="headerlink" title="反压是什么"></a>反压是什么</h1><p>反压可以限制每个batch接收到的消息量</p><pre><code>Spark Streaming 从v1.5开始引入反压机制（back-pressure）,通过动态控制数据接收速率来适配集群数据处理能力。</code></pre><h1 id="为什么设置反压"><a href="#为什么设置反压" class="headerlink" title="为什么设置反压"></a>为什么设置反压</h1><p>如果在一个batch内收到的消息过多，这就需要为executor分配更多内存，可能会导致其他spark streaming应用程序资源分配不足，甚至有OOM的风险。反压机制就可以动态控制batch接收消息速率，来适配集群处理能力。</p><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><ul><li>开启反压</li></ul><p>SparkConf.set(“spark.streaming.backpressure.enabled”, “true”)</p><ul><li>设置每个kafka partition读取消息的最大速率:</li></ul><p>SparkConf.set(“spark.streaming.kafka.maxRatePerPartition”, “spark.streaming.kafka.maxRatePerPartition”)</p><pre><code>这个值要结合spark Streaming处理消息的速率和batchDuration，尽量保证读取的每个partition数据在batchDuration时间内处理完，这个参数需要不断调整，以做到尽可能高的吞吐量.</code></pre><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><h2 id="速率预估"><a href="#速率预估" class="headerlink" title="速率预估"></a>速率预估</h2><ol><li>rateController （in DirectKafkaInputDStream）</li><li>RateController : 继承自StreamingListener. 用于处理BatchCompleted事件(见下图)。</li><li>RateEstimator</li><li>PIDRateEstimator</li></ol><img src="/2019/01/04/SparkStreaming反压机制详解/RateController.png"><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>maxMessagesPerPartition (in DirectKafkaInputDStream.scala)</p><img src="/2019/01/04/SparkStreaming反压机制详解/maxMessagesPerPartition.png"><p>com.google.common.util.concurrent.RateLimiter</p><p>RateLimiter是guava提供的基于令牌桶算法的实现类，可以非常简单的完成限流特技，并且根据系统的实际情况来调整生成token的速率。</p><h1 id="需要注意的坑"><a href="#需要注意的坑" class="headerlink" title="需要注意的坑"></a>需要注意的坑</h1><h2 id="从多个Topic创建Stream"><a href="#从多个Topic创建Stream" class="headerlink" title="从多个Topic创建Stream"></a>从多个Topic创建Stream</h2><p>根据 <strong><em>maxMessagesPerPartition</em></strong> 代码可知，每次根据上一个速率来预估速率，如果多个topic速率相差过大，会造成预估的速率忽大忽小(如下图)，速率很不稳定，整体上接近多个速率的平均值。</p><img src="/2019/01/04/SparkStreaming反压机制详解/inputRate.png"><h2 id="一个Job多个Stream"><a href="#一个Job多个Stream" class="headerlink" title="一个Job多个Stream"></a>一个Job多个Stream</h2><p>由于只能配置一个参数，所以只能配置一个各topic对应partion速率的折中值，若不同topic的partition速率差别太大，则很难两全。</p><pre><code>ps:按小的设，大的会频繁甚至始终命中背压。按大的设，小的起不到背压效果而OOM。</code></pre><h2 id="maxRatePerPartition参数设置"><a href="#maxRatePerPartition参数设置" class="headerlink" title="maxRatePerPartition参数设置"></a>maxRatePerPartition参数设置</h2><p>这个是速率，不需要乘以batch duration了。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li>再谈Spark Streaming Kafka反压 <a href="https://www.jianshu.com/p/c0b724137416" target="_blank" rel="noopener">https://www.jianshu.com/p/c0b724137416</a></li><li>Spark Streaming性能优化: 如何在生产环境下应对流数据峰值巨变 <a href="https://www.cnblogs.com/itboys/p/6486089.html" target="_blank" rel="noopener">https://www.cnblogs.com/itboys/p/6486089.html</a></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景概念&quot;&gt;&lt;a href=&quot;#背景概念&quot; class=&quot;headerlink&quot; title=&quot;背景概念&quot;&gt;&lt;/a&gt;背景概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;DStream： 表示一系列时间序列上连续的RDDs。&lt;/li&gt;
&lt;li&gt;Batch Duration：spark streaming的核心参数，设置流数据被分成多个batch的时间间隔，每个spark引擎处理的就是这个时间间隔内的数据。&lt;/li&gt;
&lt;li&gt;InputDStream：InputDStream继承自DStream，是所有输入流的基类，代表从源接收到的原始数据流DStreams，每一个InputDStream关联到单个Receiver对象，从源数据接收数据并存储到spark内存，等待处理。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术原理" scheme="https://blog.guopengfei.top/categories/%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="spark" scheme="https://blog.guopengfei.top/tags/spark/"/>
    
  </entry>
  
</feed>
